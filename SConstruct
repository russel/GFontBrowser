# -*- mode: python; coding: utf-8; -*-

# GFontBrowser — A font browser for GTK+, Fontconfig, Pango based systems.
#
# Copyright © 2018, 2020  Russel Winder <russel@winder.org.uk>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from functools import reduce
import os
import pathlib

from PkgConfig import get_pkgconfig_data
from GNUInstall import get_paths

build_directory_path = pathlib.Path('scons_build')

def dmd_style_link_flags(libs_list):
    return ['-L{}'.format(flag) for flag in libs_list]

gtk_flags, gtk_libs = get_pkgconfig_data('gtkd-3')
fontconfig_flags, fontconfig_libs = get_pkgconfig_data('fontconfig')
pangoft2_flags, pangoft2_libs = get_pkgconfig_data('pangoft2')

dependency_flags = gtk_flags + fontconfig_flags + pangoft2_flags
dependency_libs = dmd_style_link_flags(gtk_libs) + dmd_style_link_flags(fontconfig_libs) + dmd_style_link_flags(pangoft2_libs)

# Two copies of the option -pthread get added to the flags, ldc2 really doesn't like this option at all.
dependency_flags.remove('-pthread')
dependency_flags.remove('-pthread')

unitthreaded_flags, unitthreaded_libs = get_pkgconfig_data('unit-threaded')
unitthreaded_libs = dmd_style_link_flags(unitthreaded_libs)

environment =  Environment(
    tools=['ldc', 'link'],
    #DFLAGS=['-g', '-gc', '-d-debug', '-J.', '-Jsource/resource'] + dependency_flags,
    DFLAGS=['-O', '-release', '-J.', '-Jsource/resource'] + dependency_flags,
    DLINKFLAGS=['-link-defaultlib-shared'] + dependency_libs,
    ENV=os.environ,
)

test_environment = environment.Clone()
test_environment.Append(DFLAGS=['-unittest'] + unitthreaded_flags)
test_environment.Append(DLINKFLAGS=unitthreaded_libs)

fontconfig_module = environment.Command('generated/fontconfig.d', '/usr/include/fontconfig/fontconfig.h', 'dstep -o $TARGET $SOURCE')
NoClean(fontconfig_module)

source = Glob('source/*.d') + Glob('source/**/*.d')

test_source = [item for item in source if item.name != 'main.d']

module_names_for_testing = [f.name.replace('.d', '') for f in test_source]

source.append(fontconfig_module)
test_source.append(fontconfig_module)

application = environment.ProgramAllAtOnce((build_directory_path / 'gfontbrowser').as_posix(), source)

module_names_for_testing_as_string = reduce(
    lambda t, x: t + ', "' + x + '"' if t != '' else '"' + x + '"',
    module_names_for_testing,
    '')

test_main_code = f'''
//Automatically generated by unit_threaded.gen_ut_main, do not edit by hand.
import unit_threaded.runner : runTestsMain;

mixin runTestsMain!({module_names_for_testing_as_string});
'''

test_main_file = open('generated/ut_scons_main.d', 'w+')
test_main_file.write(test_main_code)

# TODO This fails to find main from here but the same ldc2 commands works fine from the command line
test = test_environment.ProgramAllAtOnce((build_directory_path / 'gfontbrowser_test').as_posix(), test_source + [test_main_file.name])

Default(environment.Alias('build', application))
environment.Command('run', application, './$SOURCE')
test_environment.Alias('build_test', test)
test_environment.Command('test', test, './$SOURCE')

Clean('.', [build_directory_path.as_posix()])
